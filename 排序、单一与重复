$ cat 1.txt    #空格对于文本有影响
1
3
3
4
6
2
2
4
4
5

$ cat 1.txt | uniq > uniq_lines.txt | cat uniq_lines #找出已排序文件中不重复的行
1
2
3
4
5
6


sort的-m选项
$ sort -m sorted1 sorted2 #合并两个排过序的文件，并且不用重新排序

$ cat 1.txt
1    mac    2000
2    winxp  4000
3    bsd    1000
4    linux  1000

sort的-o选项
由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename > newfile。

但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。但是-o能够解决问题

$cat 1.txt
1
3
5
2
4

$sort -n 1.txt -o 1.txt
$cat 1.txt
1
2
3
4
5

sort的-u选项 #输出行中去除重复行
whwu@master:~/script> cat 1.txt
1
2
3
4
5
4
3
9
6
whwu@master:~/script> sort -n -u 1.txt  #sort -nu 1.txt效果一样
1
2
3
4
5
6
9

sort的-t与-k选项

$ sort -nkr 1 1.txt # n--按数字 k--那一列 r--逆序
4    linux  1000
3    bsd    1000
2    winxp  4000
1    mac    2000


whwu@master:~/script> cat 2.txt
banana:30:5.5
apple:10:2.5
pear:90:2.3
orange:20:3.4

whwu@master:~/script> sort -t : -n -k 2 2.txt  # -t设定间隔符 第二列升序来排序
apple:10:2.5
orange:20:3.4
banana:30:5.5
pear:90:2.3


其他的sort常用选项

-f会将小写字母都转换为大写字母来进行比较，亦即忽略大小写

-c会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1

-C会检查文件是否已排好序，如果乱序，不输出内容，仅返回1

-M会以月份来排序，比如JAN小于FEB等等

-b会忽略每一行前面的所有空白部分，从第一个可见字符开始比较

#! /bin/bash
#用途：判断文件是否排序
sort -c $1;         #$1 命令行参数
if [ $? -eq 0 ];    #$? 上一条命令的返回结果
then
        echo sorted;
else
        echo unsorted;
fi


sort的其它实用技巧
whwu@master:~/script> cat 3.txt
google 110 5000
baidu 100 5000
guge 50 3000
sohu 100 4500

whwu@master:~/script> sort -t ' ' -k 1 3.txt  #按公司的字母顺序排序
baidu 100 5000
google 110 5000
guge 50 3000
sohu 100 4500

whwu@master:~/script> sort -n -t ' ' -k 2 -k 3 3.txt  #按照公司人数排序 ，人数相同的按照员工平均工资升序排序
guge 50 3000
sohu 100 4500
baidu 100 5000
google 110 5000

whwu@master:~/script> sort -n -t ' ' -k 3r -k 2 3.txt #按照员工工资降序排序，如果员工人数相同的，则按照公司人数升序排序
baidu 100 5000                                        # sort -t ' ' -k 3nr -k 2n 3.txt 效果一样
google 110 5000
sohu 100 4500
guge 50 3000

-k选项的具体语法格式
要继续往下深入的话，就不得不来点理论知识。你需要了解-k选项的语法格式，如下：

[ FStart [ .CStart ] ] [ Modifier ] [ , [ FEnd [ .CEnd ] ][ Modifier ] ]

这个语法格式可以被其中的逗号（“，”）分为两大部分，Start部分和End部分。

先给你灌输一个思想，那就是“如果不设定End部分，那么就认为End被设定为行尾”。这个概念很重要的，但往往你不会重视它。

Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分。我们重点说说Start部分的FStart和C.Start。

C.Start也是可以省略的，省略的话就表示从本域的开头部分开始。之前例子中的-k 2和-k 3就是省略了C.Start的例子喽。

FStart.CStart，其中FStart就是表示使用的域，而CStart则表示在FStart域中从第几个字符开始算“排序首字符”。

同理，在End部分中，你可以设定FEnd.CEnd，如果你省略.CEnd，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”。


whwu@master:~/script> sort -t ' ' -k 1.2 3.txt #从公司名称的第二个字母开始排序
baidu 100 5000
sohu 100 4500
google 110 5000
guge 50 3000

whwu@master:~/script> sort -t ' ' -k 1.2,1.2 -k 3,3nr  3.txt #只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序
baidu 100 5000
google 110 5000
sohu 100 4500
guge 50 3000

在modifier部分还可以用到哪些选项？

可以用到b、d、f、i、n 或 r。

其中n和r你肯定已经很熟悉了。

b表示忽略本域的签到空白符号。

d表示对本域按照字典顺序排序（即，只考虑空白和字母）。

f表示对本域忽略大小写进行排序。

i表示忽略“不可打印字符”，只针对可打印字符进行排序。（有些ASCII就是不可打印字符，比如\a是报警，\b是退格，\n是换行，\r是回车等等）


-u与-k联合实用
whwu@master:~/script> sort -k 1.1,1.1 -u 3.txt #-u只识别用-k设定的域，发现相同，就将后续相同的行都删除
baidu 100 5000
google 110 5000
sohu 100 4500

http://www.cnblogs.com/51linux/archive/2012/05/23/2515299.html



