##############计算1+2+...+100################
#!/bin/bash
#sum1.sh

total=0;   
num=0;
while((num<=100));
do
        total=` expr $total + $num `   #expr在循环中用于增量计算,注意空格
        num=` expr $num + 1 `
done

echo "$total"


########范例：有一组数据，存有某村所有家庭的人数和月总收入，找出人均月收入最高家庭#######
#!/bin/bash
# gettopfamily.sh

[ $# -lt 1 ] && echo "please input the income file" && exit -1
[ ! -f $1 ] && echo "$1 is not a file" && exit -1

income=$1
awk '{
        printf("%d %0.2f\n", $1, $3/$2);
}' $income | sort -k 2 -n -r


aaa 12 1 
aaa 12 2 
aaa 12 4 
aaa 15 1
aaa 15 2
bbb 12 1
bbb 12 2
最后我想得出的输出结果为
aaa  12  7
aaa  15  3
bbb  12  3

#!/usr/bin/awk -f	#表示以下语句的解释器为awk，-f 表示，awk脚本运行时需要跟一个文件名参数（awk一般就是用于文本处理的）。
NR == 1 { col1 = $1; col2 = $2; col3 = $3; }	#NR==1 行数为1 之后赋值 注意空格	
NR > 1 {        
	if($1 == col1 && $2 == col2)                
	col3+=$3;				# col3+$3=$3
else        
	{                   
	print(col1" "col2" "col3);               
	col1 = $1; col2 = $2; col3 = $3;        
	}   
}
END { print(col1" "col2" "col3); }


############NR小例子###############
whwu@master:~/script> echo -e "A B C\nD E F\nG H I" | awk 'NR==1 {print $1}' # Number 0f Row（NR）
A


一个文件中如果有相同的行连续出现就只打印一次
whwu@master:~/script> cat error_strip.sh
#!/bin/awk -f

 #to call: error_strip.awk <filename>
 #strips out the ERROR* lines if there are more than one
 #ERROR* lines after each filed record.
 BEGIN{
     error_line=""                                       #定义变量error_line
 }
     #tell awk the whole is "ERROR *"
     {
         if ($0 == "ERROR*" && error_line == "ERROR*")   #如果整行是ERROR*，且error_line=ERROR*
            { next}					 #回到程序开头，忽略后面语句
        else
            { error_line = $0;                           #else error_line为整行信息
        print                                            #打印
        }
     }


 #!/bin/awk -f
 #error_strip.awk
 #to call: error_strip.awk <filename>
 #strips out the ERROR* lines if there are more than one
 #ERROR* lines after each filed record.
 BEGIN{
     error_line=""
 }
     #tell awk the whole is "ERROR *"
     {
         if ($0 == "ERROR*" && error_line == "ERROR*")
             next;
         error_line = $0;
         print
     }

whwu@master:~/script>cat error_strip.sh
INVALID LCSD 98GJ23
ERROR*
ERROR*
CAUTION LPSS ERROR ON ACC NO.
ERROR*
ERROR*
ERROR*
ERROR*
ERROR*
PASS FILED INVALID ON GHSI
ERROR*
CUTION LPSS ERROR ON ACC NO.
ERROR*
ERROR*

whwu@master:~/script> ./error_strip.sh error.txt
LID LCSD 98GJ23
ERROR*
CAUTION LPSS ERROR ON ACC NO.
ERROR*
PASS FILED INVALID ON GHSI
ERROR*
CUTION LPSS ERROR ON ACC NO.
ERROR*


#向AWK脚本传递参数
whwu@master:~/script> cat age.sh
#!/bin/awk -f
#age.sh
{
        if($5 < AGE )
                print $0
}
whwu@master:~/script> ./age.sh AGE=10 grade.txt
M.Tansley       05/99   48311   Green   8       40      44
J.Lulu          06/99   48317   green   9       24      26

awk 数组，awk数组是类似于一个键值对，既可以使用数字做下标，也可以使用字符串做下标
whwu@master:~/script> cat arraytest.sh
#!/bin/awk -f
#name:arraytest.sh
#prints out an array

BEGIN{
        record="123#456#789";
        split(record,myarray,"#")
}
END{
        for(i in myarray)
        {
                print myarray[i]
        }
}
whwu@master:~/script> ./arraytest.sh size.txt
123
456
789


grade_student.txt:
 
Yellow#Junior
Orange#Senior
Yellow#Junior
Purple#Junior
Brown-2#Junior
White#Senior
Orange#Senior
Red#Junior
Brown-2#Senior
Yellow#Senior
Red#Junior
Blue#Senior
Green#Senior
Purple#Junior
White#Junior

 #!/bin/awk -f
 #name: belts.sh
 #to call: belts.awk grade2.txt
 #loops through the grade2.txt file and counts how many
 #belts we have in(yellow,orange,red)
 #also count how many adults and juniors we have
 #
 #start of BEGIN
 #set FS and load the arrays and our values
 BEGIN{
     FS="#"
     #load the belt colours we are interested in only
     belt["Yellow"]
     belt["Orange"]
     belt["Red"]
     #end of BEGIN
     #load the student type
     student["Junior"]
     student["Senior"]
 }
 #loop thru array that holds the belt colours against field-1
 #if we have a match,keep a running total
 { for (colour in belt)
     {
         if ($1==colour)
             belt[colour]++
     }
 }
     #loop thru array that holds the student type against
     #field-2 if we have a match, keep a running total
        { for(senior_or_junior in student)
            {
                if($2 == senior_or_junior)
                    student[senior_or_junior]++
            }
        }
     #finished processing so print out the matches..for each array
 END{ for(colour in belt)
        print "The club has",belt[colour],colour,"Belts"

         for(senior_or_junior in student)
              print "The club has",student[senior_or_junior], senior_or_junior, "students"
    }


whwu@master:~/script> ./belts.sh color.txt
The club has 2 Orange Belts
The club has 2 Red Belts
The club has 3 Yellow Belts
The club has 7 Senior students
The club has 8 Junior students


whwu@master:~/script> cat number.txt
1
2
3
4
5
6
7
8
9
10
whwu@master:~/script> awk 'BEGIN{i=0}{i+=$1}END{print i}' number.txt
55


计算文件中单词的频率
whwu@master:~/script> cat word_freq.sh
#!/bin/bash
#word_freq.sh

if [ $# -ne 1 ];
then
echo "Usage: $0 filename";
exit -l
fi

filename=$1

egrep -o "\b[[:alpha:]]+\b" $filename | \
awk '{ count[$0]++ }
END{ printf("%-14s%s\n","Word","Count");
for (ind in count)
{ printf("%-14s%d\n",ind,count[ind]);}
}'
whwu@master:~/script> ./word_freq.sh word.txt
Word          Count
used          3
apple         3
this          1
haha          2


whwu@master:~/script> cat 7.txt
1 3
3 7
4 4
7 5
23 12
1 1
2 3
5 7
whwu@master:~/script> awk 'NR%4==1{i=0;j=0; print }NR%4!=1{i+=$1;j+=$2;if(NR%4==0)print i,j}' 7.txt
1 3
14 16
23 12
8 11

whwu@master:~/script> cat test  #if循环注意格式
#!/bin/bash

#a=1;
if [ $(($1%2)) -ne 1 ];
then
        echo "ok";
else
        echo "oh~no~";
fi
whwu@master:~/script> ./test 5
oh~no~


匹配回文字（abba或aba）
whwu@master:~/script> cat match_palindrome.sh
#!/bin/bash
#match_paliindrome.sh

if [ $# -ne 2 ];
then
        echo "Usage: $0 filename string_length"
exit -l
fi

filename=$1;
basepattern='/^\(.\)'
count=$(($2/2))             #当$2=3时，count=1

for((i=1;i<$count;i++))
do
basepattern=$basepattern'\(.\)';
done

if [ $(($2%2)) -ne 0 ];       #注意if语句中的空格
then
 basepattern=$basepattern'.';
fi

for((count;count>0;count--))
do
basepattern=$basepattern'\'"$count";
done

basepattern=$basepattern'$/p'
sed -n "$basepattern" $filename
whwu@master:~/script> cat 8.txt
abba
cac
acssca
acsca
qwerrewq
wecac
acssca
tyyt
uioiu
123321
1221
121
whwu@master:~/script> ./match_palindrome.sh 8.txt 5
acsca
uioiu

whwu@master:~/script> cat match_palindrome2.sh #通过rev来判断是否是回文字
#!/bin/bash

string=$1
if [[ "$string" == "$(echo $string | rev )" ]];
then
echo "Palindrome"
else
echo "Not palindrome"
fi
whwu@master:~/script> ./match_palindrome2.sh asdsa
Palindrome

whwu@master:~/script> cat number.sh   #for(...)中不能进行小数运算 生成含小数的数列
#!/bin/bash

j=10
for ((i=1;i<=5;i++))
do
        echo $j;
        j=$(echo "$j-0.5" | bc);
done

whwu@master:~/script> ./number.sh
10
9.5
9.0
8.5
8.0

########文件内容叠加##########
whwu@master:~/script/test> cat addfile.sh
#!/bin/bash
#add several files into one file

for f in ./*.txt
do
        tr -d '\n' < $f >> big.txt
done



##############echo的小技巧#############
whwu@master:~/script> var="This is a line of text"
whwu@master:~/script> echo ${var/line/REPLACED}
This is a REPLACED of text

whwu@master:~/script> string=abcdefghijklmnopqrstuvwxyz 

whwu@master:~/script> echo ${string:4}    #echo ${var_name:start_point:length} 第四个之后
efghijklmnopqrstuvwxyz

whwu@master:~/script> echo ${string:4:3}   #第四个之后三个字母
efg

whwu@master:~/script> echo ${string:(-1)}
z

whwu@master:~/script> echo ${string:(-2)}
yz


gau2tm.sh
#!/bin/bash

ls *.gjf > gjf.list
let docnum=$(wc -l gjf.list | cut -c1-2)
gjfnum=0
let linini=0
let linend=0
let linnum=0
cp gjf.list doc.list
sed -i 's/.gjf//g' doc.list
while [ "$gjfnum" -lt "$docnum" ]
        do
        let gjfnum=gjfnum+1
	mkdir $(head -$gjfnum doc.list | tail -1)
#	mv $(head -$gjfnum gjf.list | tail -1) $(head -$gjfnum doc.list | tail -1)
#	cd $(head -$gjfnum doc.list | tail -1)

grep -n '^$' $(head -$gjfnum gjf.list | tail -1) > null-line.txt
sed -i 's/://g' null-line.txt
let linini=$(head -2 null-line.txt | tail -1)
let linend=$(head -3 null-line.txt | tail -1)
let linnum=linend-linini-2
#cat head.txt > turbo.in
echo -e "%title\nsigle point\n%method\nENRGY :: ri-mp2/def2-SVP \n%charge\n0\n%coord xyz" > turbo.in
echo $linnum >> turbo.in
echo "" >> turbo.in
let linend=linend-1
head -$linend $(head -$gjfnum gjf.list | tail -1) > coord.txt
tail -$linnum coord.txt >> turbo.in
echo "%end" >> turbo.in
rm coord.txt null-line.txt

mv turbo.in $(head -$gjfnum doc.list | tail -1)
cp pbs_tmole $(head -$gjfnum doc.list | tail -1)/pbs_tmole
done



格式转化coord到tmole
#!/bin/bash
#coord2tmole.sh--format transfer


#generate gaussion format
basename `pwd` > tmp
cat > $(head tmp).gjf << EOF   #注意EOF命令的运用
# hf/3-21g

test

0 1
EOF
grep -n 'redundant$' coord > tmp2
sed -i 's/:$redundant//g' tmp2
head -n $(cat tmp2) coord > tmp3
sed -i '1d' tmp3
sed -i '$d' tmp3
awk '{printf("\t %c %f   %f   %f \n"),$4,$1*0.529177,$2*0.529177,$3*0.529177}' tmp3 >> $(head tmp).gjf
echo '' >> $(head tmp).gjf
rm tmp*


#generate tmole format
cp *.gjf  tmp.gjf

let linini=0
let linend=0
let linnum=0

grep -n '^$' tmp.gjf > null-line.txt
sed -i 's/://g' null-line.txt
let linini=$(head -2 null-line.txt | tail -1)
let linend=$(head -3 null-line.txt | tail -1)
let linnum=linend-linini-2

sed -i '1,5d' tmp.gjf
sed -i '$d' tmp.gjf

echo -e "%title\nsigle point\n%method\nENRGY :: ri-b-lyp/TZVP \n%charge\n0\n%coord xyz" > turbo.in
echo $linnum >> turbo.in
echo -e "Energy=" >> turbo.in
cat tmp.gjf >> turbo.in
echo -e "%add_control_commands\n\$disp3\nADD END\n%end" >> turbo.in  #\$disp3 转译符



################文字解密##############
whwu@master:~/script> cat puzzle-help.sh
#!/bin/bash
#puzzle-help egrep-pattern [word-list-files]

pattern="$1"

egrep -h -i "$pattern" linux.words 2> /dev/null | sort -u -f
whwu@master:~/script> ./puzzle-help.sh '^b.....[xz]...$'  #匹配字母开头是b，5个字母后是x或z 三个字母后结束
Babelizing
bamboozled
bamboozler
bamboozles
baronizing
Bellinzona
Belshazzar
bigamizing
bilharzial
Birobizhan
botanizing
Brontozoum
Buitenzorg
bulldozers
bulldozing


################单词频率###############
#! /bin/sh

tr -cs "[A-Z][a-z]" "\n" |       # change the complement of letter to line break and delete continuous lines
  tr "[A-Z]" "[a-z]"|            # change upper to lower
    sort |                       # sort accoeding to letters
      uniq -c |                  # delete repeated words and show the number
        sort -k1,1nr -k2 |       # first sort according to number, large to small second sort in terms of letters
          sed ${1:-25}q          #如果$1不存在，则返回25.




#################################################################################
################shell脚本自动查找指定路径下包含某关键字的所有文件################ 
#################################################################################
#!/bin/bash 
#name：find_file.sh
#find files contains a keyword 
#write by baobao
#2016.05.16
 
echo -e "\nThis is a script to find all the files in a specified path contains a keyword!" 
 
echo -e "\nPlease input a keyword:" 
read key 
if [ "$key" == "" ]; then 
   echo -e "keyword can not be null!\n"         # echo -e  打开反斜杠ESC转义 \n为换行符。。。
    exit 0 
fi 
keyword=$key 
 
echo -e "\nPlease input your specified path:" 
read dir 
 
test ! -d $dir && echo -e "The $dir is not exist in your system.\n\n" && exit 0      # test ！-d $dir 判断路径是否为末路，若为否则执行下一条命令
 
echo -e "\n---------------You find files are:---------------\n" 
 
#keyword=JAVA_OPTS 
#dir=/jboss/jboss-eap-4.3/jboss-as/ 
 
#统计文件个数 
file_count=0 
#递归查看所有目录，即最深路径，不显示空行 
file_list=`ls -R $dir 2> /dev/null | grep -v '^$'`     # ls -R $dir 递归显示当前目录下的所有子目录以及所有目录中的文件
						       # 2> /dev/null 将错误信息重定向至/dev/null中
						       # grep -v '^$'打印非空行

for file_name in $file_list 
do 
    temp=`echo $file_name | sed 's/:.*$//g'`           # 临时文件变量temp，将ls -R即file_list中的文件名中所有匹配:后接一个或多个任意字符（.代表任意字符，*代表0个或多个$代表行尾结束符）全局替换为无
						       # 简单的说，就是把file_name变量中的匹配：的行，将：后内容替换为空   
    if [ "$file_name" != "$temp" ]; then               # shell脚本是以行为分析对象，如果临时文件变量temp是一个目录，而非文件，就将该目录赋值给cur_dir变量
        cur_dir=$temp 
        #echo "-"$cur_dir #临时显示，调试用 
    else 
        
        file_type=`file $cur_dir/$file_name | grep "text"`      #用file命令查看文件真身是否为ASCII text类型
        if [ "$file_type" != "" ]; then 
            temp=`grep $keyword $cur_dir/$file_name 2> /dev/null` 
            #echo "--"$cur_dir/$file_name #临时显示，调试用 
            if [ "$temp" != "" ]; then 
                echo $cur_dir/$file_name 
                let file_count++ #文件个数加1 
            fi 
        fi 
    fi 
done 
 
echo -e "\n-------------------------------------------------" 
echo -e "\n\nFiles Total: $file_count" 
echo -e "\nFind Finished!\n"

whwu@master:~/script> ./find_file.sh

This is a script to find all the files in a specified path contains a keyword!

Please input a keyword:
come
./find_file.sh: line 13: [: come: unary operator expected

Please input your specified path:
.

-----------You find files are:-----------

./linux.words
./script/family.sh
./test/shell_example/come.txt
./test/shell_example/read_example1.sh

-------------------------------------


Files Total: 4

Find Finished!


########################################
###########设置title的小脚本############
########################################
whwu@master:~/script/test> cat title.sh
#!/bin/bash

if ! grep "^#!" $1 &>/dev/null; then     # 查找$1中有无#！，并将标准输出指向/dev/null， 如果没有则返回1
cat >> $1 << EOF                         # 文件重定向
#!/bin/bash
#Author:
#Date & Time:`date +"%F %T"`             # 显示当前时间并格式化
#Description:
EOF
fi
vim +5 $1                                # 显示 $1

whwu@master:~/script/test> date +'%F %T'
2016-05-26 23:04:57



########################################
############比较三个数的大小############
########################################
whwu@master:~/script/test> cat cmp_3.sh
#!/bin/bash
#Author:
#Date & Time:2016-05-26 23:37:06
#Description: compare 3 numbers

echo "please enter three numbers:"

read -p "the first number:" n1
read -p "the second number:" n2
read -p "the third number:" n3

let max=$n1

if [ $n2 -gt $n1 ]
then
        let max=$n2
fi

if [ $n3 -gt $n2 ]
then
        let max=$n3
fi

echo "The max number is $max."
whwu@master:~/script/test> ./cmp_3.sh
please enter three numbers:
the first number:23
the second number:34
the third number:12
The max number is 34.


########################################
################偶数加和################
########################################
whwu@master:~/script/test> cat add_evennumber.sh
#!/bin/bash
#Author:
#Date & Time:2016-05-26 23:46:40
#Description: add even number

sum=0
for i in `seq 1 100`
do
        if [ $[$i%2] == 0 ]                 #变量前要有$ ,变量计算完赋值时前还要有$
        then
                sum=$(($sum+$i))
        fi
done
echo "$sum"
whwu@master:~/script/test> ./add_evennumber.sh
2550



#####################################
#############DOSCAR文本处理###########
#####################################
#!/bin/bash
# 将DOSCAR中文件不同部分取出并分别处理，除第一组外，其余各组中每行的
# 数字相加

grep -n "35.00000000" DOSCAR | awk 'BEGIN{FS = ":"} {print $1}' > temp1	# 以35.000位分界符，将文件中含35.000的行数打印至temp1

let total_line=$(wc -l temp1 | cut -c1-2)	# temp1中总共的行数赋值给total_line
let current_line=1

while [ "$current_line" -lt "$total_line" ]	# 如果current_line比total_line小，则执行while循环
do
        let next_line=current_line+1
        let first=$(awk -v n=$current_line '{if(NR==n) print $1}' temp1)	# 将参数传递至awk语句内
        let second=$(awk -v n=$next_line '{if(NR==n) print $1}' temp1)
        let first=first+1
        let second=second-1
        sed -n "$first, $second p" DOSCAR > $current_line.txt
        if [ $current_line == 1 ]
        then
                cp $current_line.txt $current_line.data
        else
                awk '{for(i=2;i<=NF;++i)printf $i "\t";printf "\n"}' $current_line.txt > $current_line.tmp
                awk '{print $1+$2+$3}' $current_line.tmp > $current_line.data
        fi
        let current_line=current_line+1
done

let second=second+2
sed -n "$second, $ p" DOSCAR > $current_line.txt
awk '{for(i=2;i<=NF;++i)printf $i "\t"; printf "\n"}' $current_line.txt > $current_line.tmp
awk '{print $1+$2+$3}' $current_line.tmp > $current_line.data

rm temp1
rm *.txt
rm *.tmp 


##################################
#####将多个文件中的不同列相加#######
##################################
[hlliu@server script]$ cat test1.txt 
1
2
3
4
5
[hlliu@server script]$ cat test2.txt 
1
2
3
4
5
[hlliu@server script]$ cat post-calc.txt 
2
4
6
8
10
[hlliu@server script]$ cat calculate.sh 
#!/bin/bash

if [ $# -eq 0 ];then	# 如果参数个数为0，则报出错误提示信息
        echo "at least two files"
else
        paste $* > temp.txt	# 将所有文件中的列，paste至一个文件中
        awk '{x=0;for(i=1;i<=NF;i++){x+=$i};print x}' temp.txt > post-calc.txt	# 每一行求和

        rm temp.txt
fi


##################################
##########电荷密度差计算##########
##################################
从文本中读取每点的电荷密度，求面平均，最后求差值（ABC-A-B-C）

[hlliu@server charge_test]$ head -20 CHGCARA	# 文本情况
surface-graphane-12x12                  
   1.00000000000000     
    15.000000    0.000000    0.000000
     0.000000   15.000000    0.000000
     0.000000    0.000000   15.000000
   O    H 
     1     2
Direct
  0.389800  0.497690  0.486850
  0.453000  0.503690  0.478980
  0.360940  0.552290  0.469980
 
  224  224  224
 0.20983906783E-03 0.20038309096E-03 0.19098777171E-03 0.18167235162E-03 0.17230474902E-03
 0.16275286246E-03 0.15305241565E-03 0.14341014584E-03 0.13403251960E-03 0.12495083757E-03
 0.11601481094E-03 0.10705329827E-03 0.98041336996E-04 0.89122568419E-04 0.80479862875E-04
 0.72173440617E-04 0.64078224162E-04 0.55964350286E-04 0.47654407745E-04 0.39144034718E-04
 0.30618779080E-04 0.22373524517E-04 0.14665254370E-04 0.75423135714E-05 0.76310593313E-06
 -.60525940360E-05 -.13078989929E-04 -.20067311535E-04 -.26553070112E-04 -.32331953439E-04
 -.37679203628E-04 -.43045604254E-04 -.48596518038E-04 -.54140069787E-04 -.59450914555E-04


[hlliu@server charge_test]$ cat delta_charge.sh		# bash脚本 
#!/bin/bash

let number=$(awk 'NR<20 && $1==$2 && $2==$3 {print $1}' $1 | tail -1)	# 从文本中读取，一行中前三列数据相同的行的第一列数据（单个坐标轴上的点数）
let n_arg=$#		# 将命令行参数个数($#)赋值于n_arg

for arg in "$@"		# $@ 将命令行中的参数独立地保存
do
        let first_line=$(awk 'NR<20 && $1==$2 && $2==$3 {print NR}' $arg | tail -1)+1
        let last_line=$(grep -n 'augmentation' $arg | awk 'BEGIN{FS=":"}{print $1}'| head -1)-1
#       sed -n "$first_line, $last_line p" $arg > $arg.txt
        sed -n -i "$first_line, $last_line p" $arg		# 打印指定的行，并保存与原文件
done

echo $n_arg	# 显示有几个命令行参数

python delta_charge.py  $number $n_arg $@	# 开始python脚本

[hlliu@server charge_test]$ cat delta_charge.py		# python数据处理脚本
import sys
import numpy as np

num_plane=int(sys.argv[1])**2				# 一个平面上的点的个数
num_bulk=int(sys.argv[1])**3				# 三维空间中一共有多少个点
num_file=int(sys.argv[2])				# 由bash脚本传递过来的命令行参数有几个，需要处理的文件个数
plane_aver = []						# 创建一个名为plane_aver的列表

for i in range(3, 3+num_file):
        aver_list=[]
        start=0
        final=num_plane
        with open(sys.argv[i]) as f:			# 读取第一个文件
                number=map(float, f.read().split())	# 以空格作为分隔符，并将每个元素的形式变为浮点数形式
                while final <= num_bulk:		
                        aver_list.append(sum(number[start:final])/num_plane)	# 将数字相加并求平均值存于aver_list中
                        start=start+num_plane
                        final=final+num_plane
                plane_aver.append(aver_list)		

arr_aver = np.array(plane_aver)	# 将列表变成数组
result=list(arr_aver[0]-sum(arr_aver[1:]))

f1=open('result.txt', 'w')	# 打开文件
for i, j in enumerate(result):
        print >> f1,i,j		# 将数据打印至文件
f1.close()			# 关闭文件



[hlliu@server charge_test]$ ./delta_charge.sh CHGCARAB.txt CHGCARA.txt CHGCARB.txt CHGCARC.txt	# 脚本使用方法 
4
[hlliu@server charge_test]$ wc -l result.txt # 脚本运行后得到的文件
224 result.txt


##########每个点的电荷密度差计算##########

[hlliu@server charge_test]$ cat delta_density_point.py 
import sys
import numpy as np

num_arg = len(sys.argv)
bulk_point=[]

for i in range(1, num_arg):
        with open(sys.argv[i]) as f:
                number=map(float, f.read().split())
                bulk_point.append(number)

bulk_point_array = np.array(bulk_point)
result = (bulk_point_array[0]-sum(bulk_point_array[1:])).reshape(224,50176)

f1=open('delta_density_all.txt', 'w')
np.savetxt(f1, result)
f1.close()

[hlliu@server charge_test]$ wc -l delta_density_all.txt 
224 delta_density_all.txt




[hlliu@server test4delta]$ cat delta_charge_v2.py	 # python数据处理脚本版本2
import sys
import numpy as np

# paremeters
num_axis=int(sys.argv[1])
num_plane=int(sys.argv[1])**2
num_bulk=int(sys.argv[1])**3
num_file=int(sys.argv[2])
bulk = []


#generate array for calculation
for i in range(3, 3+num_file):
        with open(sys.argv[i]) as f:
                number=map(float, f.read().split())
                bulk.append(number)

bulk_array=np.array(bulk)

# calculate the plane-average difference of charge density
result1=bulk_array[0]-sum(bulk_array[1:])

start=0
final=num_plane
result1_list=[]
while final <= num_bulk:
        result1_list.append(np.sum(result1[start:final])/num_plane)
        start=start+num_plane
        final=final+num_plane

f1=open('plane_average.txt', 'w')
for i, j in enumerate(result1_list):
        print >> f1,i,j
f1.close()


# calculate the difference of charge density for all points in the bulk
result2=result1.reshape(num_plane, num_axis)
f2=open('delta_density_all.txt', 'w')
np.savetxt(f2, result2)
f2.close()

[hlliu@server test4delta]$ ls
CHGCARA  CHGCARAB  CHGCARB  delta_charge.sh  delta_charge_v2.py  delta_density_all.txt  plane_average.txt
[hlliu@server test4delta]$ wc -l delta_density_all.txt 
50176 delta_density_all.txt
[hlliu@server test4delta]$ wc -l plane_average.txt 
224 plane_average.txt


###电子密度求和###
[hlliu@server script]$ cat calculate_v2.sh
#!/bin/bash

for arg in "$@"		# $@ 将命令行中的参数独立地保存
do
        awk '{for(i=2;i<=NF;++i)printf $i "\t"; printf "\n"}' $arg > $arg.tmp	# 打印非第一列
done

paste *.tmp > calc.data

awk '{x=0;for(i=1;i<=NF;i++){x+=$i};print x}' calc.data > post-calc.txt	 # 求和
rm *.tmp

[hlliu@server script]$ cat a.data
1 2 3
2 2 2
3 3 3
4 5 6
[hlliu@server script]$ cat b.data
10 100
10 100
10 100
10 100
[hlliu@server script]$ ./calculate_v2.sh a.data b.data
105
104
106
111




 #############################################
 ########在文件中指定行最后加上空格和数字########
 #############################################

 ####应用gaussian bsse文件的生成####
 a="/test.html /dir1 /abc.txt"

whwu@master:~/script> a="/test.html /dir1 /abc.txt"
whwu@master:~/script> echo $a|awk '{for(i=1;i<=NF;i++){printf "--exclude="$i""}{print " "}}'
--exclude=/test.html--exclude=/dir1--exclude=/abc.txt


whwu@master:~/script> cat test1
a bcd
a edf
b wer
whwu@master:~/script> awk '$1=="a"{print $0}' test1
a bcd
a edf
whwu@master:~/script> awk '$1=="a"{printf ""$0" 1"}{print ""}' test1
a bcd 1
a edf 1

whwu@master:~/script> awk '{if($1=="a") printf ""$0" 1\n"; else printf ""$0" 2\n"}' test1
a bcd 1
a edf 1
b wer 2

whwu@master:~/script> cat test1
#p b3lyp/aug-cc-pvdz

a bcd
a edf
b wer
whwu@master:~/script> awk '{if($1=="a") printf ""$0" 1\n"; else if($1=="b")  printf ""$0" 2\n"; else printf ""$0"\n"}' test1
#p b3lyp/aug-cc-pvdz

a bcd 1
a edf 1
b wer 2






