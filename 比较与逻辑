比较与逻辑

if条件：
if condition；
then
commands；
fi

else if和else
if condition；
then
commands；
else if condition；
then
	commands
else
	commands
fi

[ condition ] && action; #如果condition为真，则执行action
[ condition ] || action; #如果condition为假，则执行action

$$是逻辑与运算符
||是逻辑或运算符

#!/bin/bash

a=1;
if [ $a -eq  0 ];
        then
        echo "good";
        else
        echo "no";
fi

输出结果：no

-gt：大于
-lt：小于
-ge：大于或等于
-le：小于或等于

[ $var1 -ne 0 -a $var2 -gt 2 ] #使用逻辑与-a
[ $var -ne 0 -o var2 -gt 2] #逻辑或-o

文件系统相关测试
-f 如果给定的变量包含正常的文件路径或文件名，则返回真。
-x 如果给定的变量包含的文件可执行，则返回真。
LINUX_SHELL脚本攻略p49

if语句以及case语句
if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if ... else 语句： 
• if ... fi 语句；
• if ... else ... fi 语句；
• if ... elif ... else ... fi 语句。

1) if ... else 语句
if ... else 语句的语法： if [ expression ]
then
   Statement(s) to be executed if expression is true
fi
如果 expression 返回 true，then 后边的语句将会被执行；如果返回 false，不会执行任何语句。
最后必须以 fi 来结尾闭合 if，fi 就是 if 倒过来拼写，后面也会遇见。
注意：expression 和方括号([ ])之间必须有空格，否则会有语法错误。
whwu@master:~/script> cat if_example.sh
#!/bin/bash

if [ $1 == $2 ]
then
        echo "a is equal to b"
fi

if [ $1 != $2 ]
then
        echo "a is not equal to b"
fi
whwu@master:~/script> ./if_example.sh 2 3
a is not equal to b
whwu@master:~/script> ./if_example.sh 2 2
a is equal to b


2) if ... else ... fi 语句
if ... else ... fi 语句的语法： if [ expression ]
then
   Statement(s) to be executed if expression is true
else
   Statement(s) to be executed if expression is not true
fi
如果 expression 返回 true，那么 then 后边的语句将会被执行；否则，执行 else 后边的语句。
whwu@master:~/script> cat if_example.sh
#!/bin/bash

if [ $1 == $2 ]
then
        echo "a is equal to b"
else
        echo "a is not equal to b"
fi
whwu@master:~/script> ./if_example.sh 2 2
a is equal to b
whwu@master:~/script> ./if_example.sh 2 3
a is not equal to b


3) if ... elif ... fi 语句
if ... elif ... fi 语句可以对多个条件进行判断，语法为： if [ expression 1 ]
then
   Statement(s) to be executed if expression 1 is true
elif [ expression 2 ]
then
   Statement(s) to be executed if expression 2 is true
elif [ expression 3 ]
then
   Statement(s) to be executed if expression 3 is true
else
   Statement(s) to be executed if no expression is true
fi
哪一个 expression 的值为 true，就执行哪个 expression 后面的语句；如果都为 false，那么不执行任何语句。

whwu@master:~/script> cat if_example.sh
#!/bin/bash

if [[ $1 == $2 ]]
then
        echo "a is equal to b"
elif [[ $1>$2 ]]
then
        echo "a is larger than b"
else
        echo "a is smaller than b"
fi
whwu@master:~/script> ./if_example.sh 2 1
a is larger than b
whwu@master:~/script> ./if_example.sh 2 3
a is smaller than b




-ne 比较数字 (numberic) ; != 比较字符 (string), 但后者拿来 
比较数字也可,只是不是标准用法 
-lt 是等同 < , 但 < 只能在 shell 的数值操作符 (( )) 或 
者 逻缉操作符 [[ ]] 才可使用, -lt , -eq , -gt , -ge 
-le , 这些是 test , 就是 [ ] 这个内建命令使用的条件操 
作符, 数字用, = , != 字符用, == 这个该是 [[ ]] 用的, 
可用来比对正规表示式, 但用在 [ ] 也可,只是不太正统用法 



逻辑的NOT，AND与OR
一、逻辑运算符 

 
逻辑卷标 表示意思 
1. 关于档案与目录的侦测逻辑卷标！ 
-f 常用！侦测『档案』是否存在 eg: if [ -f filename ] 
-d 常用！侦测『目录』是否存在 
-b 侦测是否为一个『 block 档案』 
-c 侦测是否为一个『 character 档案』 
-S 侦测是否为一个『 socket 标签档案』 
-L 侦测是否为一个『 symbolic link 的档案』 
-e 侦测『某个东西』是否存在！ 
2. 关于程序的逻辑卷标！ 
-G 侦测是否由 GID 所执行的程序所拥有 
-O 侦测是否由 UID 所执行的程序所拥有 
-p 侦测是否为程序间传送信息的 name pipe 或是 FIFO （老实说，这个不太懂！） 
3. 关于档案的属性侦测！ 
-r 侦测是否为可读的属性 
-w 侦测是否为可以写入的属性 
-x 侦测是否为可执行的属性 
-s 侦测是否为『非空白档案』 
-u 侦测是否具有『 SUID 』的属性 
-g 侦测是否具有『 SGID 』的属性 
-k 侦测是否具有『 sticky bit 』的属性 
4. 两个档案之间的判断与比较 ；例如[ test file1 -nt file2 ] 
-nt 第一个档案比第二个档案新 
-ot 第一个档案比第二个档案旧 
-ef 第一个档案与第二个档案为同一个档案（ link 之类的档案） 
5. 逻辑的『和(and)』『或(or)』 
&& 逻辑的 AND 的意思 
|| 逻辑的 OR 的意思 

运算符号 代表意义 
= 等于 应用于：整型或字符串比较 如果在[] 中，只能是字符串 
!= 不等于 应用于：整型或字符串比较 如果在[] 中，只能是字符串 
< 小于 应用于：整型比较 在[] 中，不能使用 表示字符串 
> 大于 应用于：整型比较 在[] 中，不能使用 表示字符串 
-eq 等于 应用于：整型比较 
-ne 不等于 应用于：整型比较 
-lt 小于 应用于：整型比较 
-gt 大于 应用于：整型比较 
-le 小于或等于 应用于：整型比较 
-ge 大于或等于 应用于：整型比较 
-a 双方都成立（and） 逻辑表达式 –a 逻辑表达式 
-o 单方成立（or） 逻辑表达式 –o 逻辑表达式 
-z 空字符串 
-n 非空字符串 

whwu@master:~/script> cat logic.sh
#!/bin/bash

if ！grep "$1" 2.txt > /dev/null    #将需要打印的内容送至 /dev/null 并得到返回值 逻辑否运算符！
then
        echo "haha"
else
        echo "oh no"
fi
whwu@master:~/script> ./logic.sh a
oh no
whwu@master:~/script> ./logic.sh f
haha

whwu@master:~/script> cat logic.sh
#!/bin/bash

if grep "$1" 2.txt > /dev/null && grep "$2" 2.txt > /dev/null   #逻辑与运算符 &&
then
        echo "haha"
else
        echo "oh no"
fi
whwu@master:~/script> ./logic.sh a f
oh no
whwu@master:~/script> ./logic.sh a b
haha


whwu@master:~/script> cat logic.sh
#!/bin/bash

if grep "$1" 2.txt > /dev/null || grep "$2" 2.txt > /dev/null  #逻辑或运算符 ||
then
        echo "haha"
else
        echo "oh no"
fi
whwu@master:~/script> ./logic.sh a b
haha
whwu@master:~/script> ./logic.sh a f
haha
whwu@master:~/script> ./logic.sh r f
oh no


精简运算符
whwu@master:~/script> [ 1 -eq 1 ]&&echo 'ok'
ok
whwu@master:~/script> [ 2 < 1 ]&&echo 'ok'
-bash: 1: No such file or directory
whwu@master:~/script> [[ 2 > 1 ]]&&echo 'ok'
ok
whwu@master:~/script> [ 2 \> 1 ]&&echo 'ok'
ok
[root@localhost ~]# [ 2 -gt 1 -a 3 -lt 4 ] && echo ‘ok' 
ok 
[root@localhost ~]# [ 2 -gt 1 && 3 -lt 4 ] && echo ‘ok' 
-bash: [: missing `]‘ 
注意：在[] 表达式中，常见的>,<需要加转义字符，表示字符串大小比较，以acill码 位置作为比较。 不直接支持<>运算符，还有逻辑运算符|| && 它需要用-a[and] –o[or]表示 
[[]] 表达式 
[root@localhost ~]# [ 1 -eq 1 ] && echo ‘ok' 
ok[root@localhost ~]$ [[ 2 < 3 ]] && echo ‘ok' 
ok 
[root@localhost ~]$ [[ 2 < 3 && 4 > 5 ]] && echo ‘ok' 
ok 

注意：[[]] 运算符只是[]运算符的扩充。能够支持<,>符号运算不需要转义符，它还是以字符串比较大小。里面支持逻辑运算符：|| && 


test命令
test 命令最短的定义可能是评估一个表达式；如果条件为真，则返回一个 0 值。如果表达式不为真，
则返回一个大于 0 的值 — 也可以将其称为假值。检查最后所执行命令的状态的最简便方法是使用 $? 值。


test 和 [ 的语法如下：

test expression

[ expression ]

在这两种情况下，test 都评估一个表达式，然后返回真或假。如果它和 if、while 或 until 命令结合使用，
则您可以对程序流进行广泛的控制。不过，您无需将 test 命令与任何其它结构一起使用；您可以从命令行直
接运行它来检查几乎任何东西的状态。
test命令用法。功能：检查文件和比较值
 　　1）判断表达式
 　　if test  (表达式为真)
　　if test !表达式为假
 　　test 表达式1 –a 表达式2                  两个表达式都为真
 　　test 表达式1 –o 表达式2                 两个表达式有一个为真
 　　2）判断字符串
 　　test –n 字符串                                   字符串的长度非零
 　　test –z 字符串                                    字符串的长度为零
 　　test 字符串1＝字符串2                    字符串相等
 　　test 字符串1！＝字符串2               字符串不等
 　　3）判断整数
 　　test 整数1 –eq 整数2                        整数相等
 　　test 整数1 –ge 整数2                        整数1大于等于整数2
　　test 整数1 –gt 整数2                         整数1大于整数2
　　test 整数1 –le 整数2                         整数1小于等于整数2
　　test 整数1 –lt 整数2                          整数1小于整数2
　　test 整数1 –ne 整数2                        整数1不等于整数2
　　4）判断文件
 　　test  File1 –ef  File2　　　　　　　　两个文件具有同样的设备号和i结点号
 　　test  File1 –nt  File2　　　　　　　　文件1比文件2 新
 　　test  File1 –ot  File2　　　　　　　　文件1比文件2 旧
 　　test –b File　　　　　　　　文件存在并且是块设备文件
 　　test –c File　　　　　　　　文件存在并且是字符设备文件
 　　test –d File　　　　　　　　文件存在并且是目录
 　　test –e File　　　　　　　　文件存在
 　　test –f File 　　　　　　　　文件存在并且是正规文件
 　　test –g File　　　　　　　　文件存在并且是设置了组ID
　　test –G File　　　　　　　　文件存在并且属于有效组ID
　　test –h File　　　　　　　　文件存在并且是一个符号链接（同-L）
 　　test –k File　　　　　　　　文件存在并且设置了sticky位
 　　test –b File　　　　　　　　文件存在并且是块设备文件
 　　test –L File　　　　　　　　文件存在并且是一个符号链接（同-h）
 　　test –o File　　　　　　　　文件存在并且属于有效用户ID
　　test –p File　　　　　　　　文件存在并且是一个命名管道
 　　test –r File　　　　　　　　文件存在并且可读
 　　test –s File　　　　　　　　文件存在并且是一个套接字
 　　test –t FD　　　　　　　　文件描述符是在一个终端打开的
 　　test –u File　　　　　　　　文件存在并且设置了它的set-user-id位
 　　test –w File　　　　　　　　文件存在并且可写
 　　test –x File　　　　　　　　文件存在并且可执行

whwu@master:~/script> cat compare.sh
#!/bin/bash

echo "please enter two number"
read a
read b
if test $a -eq $b       # test expression
then
        echo "No.1 = No.2"
elif [ $a -gt $b ]      # [ expression ]
then
        echo "No.1 > No.2"
else
        echo "No.1 < No.2"
fi
whwu@master:~/script> ./compare.sh
please enter two number
1
5
No.1 < No.2
whwu@master:~/script>


whwu@master:~/script> cat check_file.sh
#!/bin/bash

echo "Enter a file name"
read a
if [ -f $a ]
then
        echo " the file is exist!"
else
        echo " the file is not exist!"
fi
whwu@master:~/script> ./check_file.sh
Enter a file name
2.txt
 the file is exist!
whwu@master:~/script> ./check_file.sh
Enter a file name
iu
 the file is not exist!
