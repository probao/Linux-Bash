awk例子
whwu@master:~/script> cat new.txt
a 1 2 3
b 2 3 4
c 5 6 7
whwu@master:~/script> awk '{print $0,$2+$3,$3/$4}' new.txt
a 1 2 3 3 0.666667
b 2 3 4 5 0.75
c 5 6 7 11 0.857143

awk命令
awk脚本的机构基本如下所示：
awk ' BEGIN{ print "start" } pattern {command} END {print "end" } file
这三个模块都是可选的，最重要的部分就是pattern语句块中的通用命令。这个语句块同样是可选的。
如果不提供该语句块，则默认执行{ print }，即打印每一个读取到的行。awk对于读取的每一行，都
会执行这个语句块。这就像一个用来读取行的while循环，在循环体中提供了相应的语句。每读取一行
时，它就会检查该行和提供的样式是否匹配。样式本身可以是正则表达式、条件以及行匹配范围。如果
匹配该样式，则执行{ }中的语句。

whwu@master:~/script> cat  /etc/passwd | head -5 > pl   #将前5行打印
whwu@master:~/script> cat pl
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

whwu@master:~/script> awk -F: '$3 == 0 {print $1}' pl  # -F: 意思是以:为分隔符  $3==0 第三个参数是否为0 是0就打印第一个参数。
root

whwu@master:~/script> awk -F: '$3 != 0 {print $1}' pl
bin
daemon
adm
lp

一些特殊变量
NR：表示记录数量（number of records），在执行过程中对应于当前行号。
NF：表示记录字段数量（number of fields），在执行过程中对应于当前行的字段数。
$0：这个变量包含执行过程中当前行的文本内容。
$1：这个变量包含第一个字段的文本内容。
$2：这个变量包含第二个字段的文本内容。
当print的参数是以逗号进行分隔时，参数打印时则以空格作为定界符；在awk的print语句中，双引号
是被当做拼接操作符使用的。


whwu@master:~/script> echo -e "line1 f2 f3\nlin2 f4 f5\nline3 f6 f7" |                     
		      awk '{print "Line no:"NR",No of fields:"NF, "$0="$0,"$1="$1,"$2="$2,"$3="$3}'   
Line no:1,No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3
Line no:2,No of fields:3 $0=lin2 f4 f5 $1=lin2 $2=f4 $3=f5
Line no:3,No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7


awk的一些简单用法
whwu@master:~/script> cat 1.txt                   #打印每一行的第二个和第三个字段
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> awk '{ print $2,$3 }' 1.txt
google
book book
lovae shell

whwu@master:~/script> cat 1.txt
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> awk 'END{ print NR }' 1.txt   #打印文件的行数
3

whwu@master:~/script> seq 5 | awk 'BEGIN { sum=0;print "summation" } {print $1"+"; sum+=$1} END {print "==="; print sum}'  # sum+=$1 意思是sum=sum+$1
summation
1+
2+
3+
4+
5+
===
15

将外部变量值传递给awk
whwu@master:~/script> VAR=100
whwu@master:~/script> echo | awk -v VARIABLE=$VAR '{ print VARIABLE }'
100

whwu@master:~/script> var1="variable1"; var2="variable2"
whwu@master:~/script> echo | awk '{ print v1,v2 }' v1=$var1 v2=$var2
variable1 variable2

用样式对awk处理的行进行过滤
whwu@master:~/script> cat facebook.txt
        google 110 5000
baidu 100 5000
guge 50 3000
        sohu 100 4500
whwu@master:~/script> awk 'NR<3' facebook.txt     #打印行号小于三的行
        google 110 5000
baidu 100 5000

whwu@master:~/script> awk '/u/' facebook.txt      #打印含u的行
baidu 100 5000
guge 50 3000
        sohu 100 4500
whwu@master:~/script> awk '!/u/' facebook.txt     #打印不含u的行
        google 110 5000



设置字段定界符-F
whwu@master:~/script> cat new
jones:x:516:516:Adrian W. Jones/OSD211/555-0123:/home/vfung:/bin/bash
dorothy:x:517:517:Dorothy Gale/KNS321/555-0044:/home/nmehio:/bin/bash
toto:x:518:518:Toto Gale/KNS322/555-0045:/home/mmicklich:/bin/bash
ben:x:519:519:Ben Franklin/OSD212/555-0022:/home/whwu:/bin/bash\
betsy:x:520:520:Betsy Ross/BMD17/555-0095:/home/ysong:/bin/bash
whwu@master:~/script> awk -F: '{print NF}' new     #NF表示每行字段个数
7
7
7
7
7
whwu@master:~/script> awk -F: '{print $NF}' new    #NF表示每段字段个数为7 $7就表示最后一个字段
/bin/bash
/bin/bash
/bin/bash
/bin/bash\
/bin/bash
whwu@master:~/script> echo 'hell the:world,!' | awk 'BEGIN {FS="[:, ]"} {print $1,$2,$3,$4}'  #指定多个字段分隔符(文档内容为：hello the:word,!)
hell the world !



awk的例子
whwu@master:~/script> cat 4.txt
100
1000
10000


100000
10
10000000000

1

12
123
1234
whwu@master:~/script> awk '/^$/ {print NR,"blank line"}' 4.txt   # /^$/匹配空行 NR表示行数 ，表示输出时为空格 ""表示打印字段。先匹配再打印
4 blank line
5 blank line
9 blank line
11 blank line
whwu@master:~/script> cat awk.sh  #可以先写一个脚本
/^$/ {print NR,"blank line"}
whwu@master:~/script> awk -f awk.sh 4.txt #提前编辑一个awk脚本再通过-f选项调用该脚本。
4 blank line
5 blank line
9 blank line
11 blank line
whwu@master:~/script> cat awk1.sh   将awk命令也编译入脚本
#!/usr/bin/awk -f

/^$/ {print NR,"blank line"}

whwu@master:~/script> ./awk1.sh 4.txt
4 blank line
5 blank line
9 blank line
11 blank line



内置变量
    以下为awk内置变量：
          ARGC        命令行参数个数
          FILENAME    当前输入文档的名称
          FNR        当前输入文档的当前记录编号，尤其当有多个输入文档时有用
          NR        输入流的当前记录编号
          NF        当前记录的字段个数
          FS        字段分隔符
          OFS        输出字段分隔符，默认为空格
          ORS        输出记录分隔符，默认为换行符\n
           RS        输入记录分隔符，默认为换行符\n

whwu@master:~/script> cat 1.txt
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> cat 2.txt
1 2 6
2 3 9
3 4 12
4 5 15
whwu@master:~/script> awk '{print FNR}' 1.txt 2.txt   # FNR当前输入文档的当前记录编号
1
2
3
1
2
3
4
whwu@master:~/script> awk '{print NR}' 1.txt 2.txt     # NR输入流的当前记录编号
1
2
3
4
5
6
7

whwu@master:~/script> awk '{print NF}' 1.txt	      # NF当前记录的字段个数 
2
3
5
whwu@master:~/script> awk 'BEGIN{OFS="-"}{print $1,$2}' 1.txt		#OFS        输出字段分隔符
book-google
baidu-book
i-lovae

whwu@master:~/script> cat 6.txt
mail from: tomcat@gmail.com
subject:hello
data:2012-07-12 17:0
content:Hello, The world.

mail from: jerry@gmail.com
subject:congregation
data:2012-07-12 08:31
content:Congregation to you.

mail from: jacob@gmail.com
subject:Test
data:2012-07-12 10:20
content:This is a test mail.
whwu@master:~/script> awk 'BEGIN {RS="" ; FS="\n"}{print $3 }' 6.txt    #RS将段落分隔符设置为空行，将字段分隔符设置为换行符，
data:2012-07-12 17:0
data:2012-07-12 08:31
data:2012-07-12 10:20



4. 表达式与操作符
    表达式是由变量、常量、函数、正则表达式、操作符组成，awk中变量有字符变量和数字变量。如果在awk中定义的变量没有初始化，则初始值为空字串或0。
    注意：字符操作时一定记得需要加引号
    1) 变量定义示例：
        a="welcome to beijing"
         b=12
     2) 操作符(awk操作符与C语言类似)
      +        加
   -        减
   *        乘
   /        除
   %        取余
   ^        幂运算
   ++        自加1
    --        自减1
    +=        相加后赋值给变量(x+=9等同于x=x+9)
    -=        相减后赋值给变量(x-=9等同于x=x-9)
    *=        相乘后赋值给变量(x*=9等同于x=x*9)
    /=        相除后赋值给变量(x/=9等同于x=x/9)
    >        大于
   <        小于
   >=        大于等于
   <=        小于等于
   ==        等于
   !=        不等于
   ~        匹配
   !~        不匹配
   &&        与
   ||        或

whwu@master:~/script> echo "test" | awk 'x=2 {print x+3}'
5
whwu@master:~/script> echo "test" | awk ' {print x+3}'   #没有赋值x默认为0
3


whwu@master:~/script> cat 6.txt
mail from: tomcat@gmail.com
subject:hello


data:2012-07-12 17:0
content:Hello, The world.

mail from: jerry@gmail.com
subject:congregation

data:2012-07-12 08:31

content:Congregation to you.

mail from: jacob@gmail.com
subject:Test
data:2012-07-12 10:20
content:This is a test mail.
whwu@master:~/script> awk '/^$/ {print x+=1}' 6.txt		 #统计所有空白行
1
2
3
4
5
whwu@master:~/script> awk '/^$/ {x+=1} END{print x}' 6.txt	 #打印总空白行个数
5


awk条件及循环语句
    1. IF条件判断格式：
    if (表达式)
         动作1
     else
         动作2
     或者if (表达式)  动作1；else 动作2
     说明：如果表达式的判断结果为真则执行动作1，否则执行动作2。
    示例：(判断boot分区可用容量小于20M时报警，否则显示OK)
whwu@master:~/script> df  |grep    "boot"  |awk  '{if($4<20000) print "Alart"; else print "OK"}'
OK


 2. 循环
    while (条件)
         动作
    x=1
     while (i < 10) {
         print $i
     }
     示例：
whwu@master:~/script> awk  ' BEGIN { while (i<=5) {++i; print i}}'  6.txt
1
2
3
4
5
6
 do
         动作
    while (条件)
     示例：
 whwu@master:~/script> awk 'BEGIN { do {++x;print x} while (x<=5)}' test.txt
1
2
3
4
5
6
for (变量；条件；计数器)
         动作
    示例：
    for (i=1;i<=10;i++)
         print i
     [jacob@localhost ~]# awk  'BEGIN {for(i=1;i<=10;i++) print i}'  test.txt
     [jacob@localhost ~]# awk  'BEGIN {for(i=10;i>=1;i--)  print i}'   test.txt
     说明：因为以上循环语句使用的awk均使用的BEGIN模式，所以输入文档可以为任意文档(无关紧要)。


Break与Continue
     break        跳出循环
    continue    终止当前循环
 whwu@master:~/script> awk 'BEGIN{for(i=1;i<=10;i++){if(i==5){continue}print i}}' test.sh
1
2
3
4
6
7
8
9
10
whwu@master:~/script> awk 'BEGIN{for(i=1;i<=10;i++){if(i==5){break}print i}}' test.sh
1
2
3
4

函数
 gsub(x,y,z)        在字串z中使用字串y替换与正则表达式x相匹配的所有字串，z默认为$0
  sub(x,y,z)        在字串z中使用字串y替换与正则表达式x相匹配的第一个字串，z默认为$0
whwu@master:~/script> awk -F: 'gsub(/x/,"H",$0){print $0}' new
jones:H:516:516:Adrian W. Jones/OSD211/555-0123:/home/vfung:/bin/bash
dorothy:H:517:517:Dorothy Gale/KNS321/555-0044:/home/nmehio:/bin/bash
toto:H:518:518:Toto Gale/KNS322/555-0045:/home/mmicklich:/bin/bash
ben:H:519:519:Ben Franklin/OSD212/555-0022:/home/whwu:/bin/bash\
betsy:H:520:520:Betsy Ross/BMD17/555-0095:/home/ysong:/bin/bash

whwu@master:~/script> awk -F: 'gsub(/o/,"H",$1){print $1}' new  #字段中的所有o都变成H
jHnes
dHrHthy
tHtH

whwu@master:~/script> awk -F: 'sub(/o/,"H",$1){print $1}' new   #字段中的第一个o变成H
jHnes
dHrothy
tHto
