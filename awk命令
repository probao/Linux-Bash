awk例子
whwu@master:~/script> cat new.txt
a 1 2 3
b 2 3 4
c 5 6 7
whwu@master:~/script> awk '{print $0,$2+$3,$3/$4}' new.txt
a 1 2 3 3 0.666667
b 2 3 4 5 0.75
c 5 6 7 11 0.857143

awk命令
awk脚本的机构基本如下所示：
awk ' BEGIN{ print "start" } pattern {command} END {print "end" } file
这三个模块都是可选的，最重要的部分就是pattern语句块中的通用命令。这个语句块同样是可选的。
如果不提供该语句块，则默认执行{ print }，即打印每一个读取到的行。awk对于读取的每一行，都
会执行这个语句块。这就像一个用来读取行的while循环，在循环体中提供了相应的语句。每读取一行
时，它就会检查该行和提供的样式是否匹配。样式本身可以是正则表达式、条件以及行匹配范围。如果
匹配该样式，则执行{ }中的语句。

whwu@master:~/script> cat  /etc/passwd | head -5 > pl   #将前5行打印
whwu@master:~/script> cat pl
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

whwu@master:~/script> awk -F: '$3 == 0 {print $1}' pl  # -F: 意思是以:为分隔符  $3==0 第三个参数是否为0 是0就打印第一个参数。
root

whwu@master:~/script> awk -F: '$3 != 0 {print $1}' pl
bin
daemon
adm
lp

一些特殊变量
NR：表示记录数量（number of records），在执行过程中对应于当前行号。
NF：表示记录字段数量（number of fields），在执行过程中对应于当前行的字段数。
$0：这个变量包含执行过程中当前行的文本内容。
$1：这个变量包含第一个字段的文本内容。
$2：这个变量包含第二个字段的文本内容。
当print的参数是以逗号进行分隔时，参数打印时则以空格作为定界符；在awk的print语句中，双引号
是被当做拼接操作符使用的。


whwu@master:~/script> echo -e "line1 f2 f3\nlin2 f4 f5\nline3 f6 f7" |                     
		      awk '{print "Line no:"NR",No of fields:"NF, "$0="$0,"$1="$1,"$2="$2,"$3="$3}'   
Line no:1,No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3
Line no:2,No of fields:3 $0=lin2 f4 f5 $1=lin2 $2=f4 $3=f5
Line no:3,No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7


awk的一些简单用法
whwu@master:~/script> cat 1.txt                   #打印每一行的第二个和第三个字段
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> awk '{ print $2,$3 }' 1.txt
google
book book
lovae shell

whwu@master:~/script> cat 1.txt
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> awk 'END{ print NR }' 1.txt   #打印文件的行数
3

