awk例子
whwu@master:~/script> cat new.txt
a 1 2 3
b 2 3 4
c 5 6 7
whwu@master:~/script> awk '{print $0,$2+$3,$3/$4}' new.txt
a 1 2 3 3 0.666667
b 2 3 4 5 0.75
c 5 6 7 11 0.857143

awk命令
awk脚本的机构基本如下所示：
awk ' BEGIN{ print "start" } pattern {command} END {print "end" } file
这三个模块都是可选的，最重要的部分就是pattern语句块中的通用命令。这个语句块同样是可选的。
如果不提供该语句块，则默认执行{ print }，即打印每一个读取到的行。awk对于读取的每一行，都
会执行这个语句块。这就像一个用来读取行的while循环，在循环体中提供了相应的语句。每读取一行
时，它就会检查该行和提供的样式是否匹配。样式本身可以是正则表达式、条件以及行匹配范围。如果
匹配该样式，则执行{ }中的语句。

whwu@master:~/script> cat  /etc/passwd | head -5 > pl   #将前5行打印
whwu@master:~/script> cat pl
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

whwu@master:~/script> awk -F: '$3 == 0 {print $1}' pl  # -F: 意思是以:为分隔符  $3==0 第三个参数是否为0 是0就打印第一个参数。
root

whwu@master:~/script> awk -F: '$3 != 0 {print $1}' pl
bin
daemon
adm
lp

一些特殊变量
NR：表示记录数量（number of records），在执行过程中对应于当前行号。
NF：表示记录字段数量（number of fields），在执行过程中对应于当前行的字段数。
$0：这个变量包含执行过程中当前行的文本内容。
$1：这个变量包含第一个字段的文本内容。
$2：这个变量包含第二个字段的文本内容。
当print的参数是以逗号进行分隔时，参数打印时则以空格作为定界符；在awk的print语句中，双引号
是被当做拼接操作符使用的。


whwu@master:~/script> echo -e "line1 f2 f3\nlin2 f4 f5\nline3 f6 f7" |                     
		      awk '{print "Line no:"NR",No of fields:"NF, "$0="$0,"$1="$1,"$2="$2,"$3="$3}'   
Line no:1,No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3
Line no:2,No of fields:3 $0=lin2 f4 f5 $1=lin2 $2=f4 $3=f5
Line no:3,No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7


awk的一些简单用法
whwu@master:~/script> cat 1.txt                   #打印每一行的第二个和第三个字段
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> awk '{ print $2,$3 }' 1.txt
google
book book
lovae shell

whwu@master:~/script> cat 1.txt
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> awk 'END{ print NR }' 1.txt   #打印文件的行数
3

whwu@master:~/script> seq 5 | awk 'BEGIN { sum=0;print "summation" } {print $1"+"; sum+=$1} END {print "==="; print sum}'  # sum+=$1 意思是sum=sum+$1
summation
1+
2+
3+
4+
5+
===
15

将外部变量值传递给awk
whwu@master:~/script> VAR=100
whwu@master:~/script> echo | awk -v VARIABLE=$VAR '{ print VARIABLE }'
100

whwu@master:~/script> var1="variable1"; var2="variable2"
whwu@master:~/script> echo | awk '{ print v1,v2 }' v1=$var1 v2=$var2
variable1 variable2

用样式对awk处理的行进行过滤
whwu@master:~/script> cat facebook.txt
        google 110 5000
baidu 100 5000
guge 50 3000
        sohu 100 4500
whwu@master:~/script> awk 'NR<3' facebook.txt     #打印行号小于三的行
        google 110 5000
baidu 100 5000

whwu@master:~/script> awk '/u/' facebook.txt      #打印含u的行
baidu 100 5000
guge 50 3000
        sohu 100 4500
whwu@master:~/script> awk '!/u/' facebook.txt     #打印不含u的行
        google 110 5000



设置字段定界符-F
whwu@master:~/script> cat new
jones:x:516:516:Adrian W. Jones/OSD211/555-0123:/home/vfung:/bin/bash
dorothy:x:517:517:Dorothy Gale/KNS321/555-0044:/home/nmehio:/bin/bash
toto:x:518:518:Toto Gale/KNS322/555-0045:/home/mmicklich:/bin/bash
ben:x:519:519:Ben Franklin/OSD212/555-0022:/home/whwu:/bin/bash\
betsy:x:520:520:Betsy Ross/BMD17/555-0095:/home/ysong:/bin/bash
whwu@master:~/script> awk -F: '{print NF}' new     #NF表示每行字段个数
7
7
7
7
7
whwu@master:~/script> awk -F: '{print $NF}' new    #NF表示每段字段个数为7 $7就表示最后一个字段
/bin/bash
/bin/bash
/bin/bash
/bin/bash\
/bin/bash
whwu@master:~/script> echo 'hell the:world,!' | awk 'BEGIN {FS="[:, ]"} {print $1,$2,$3,$4}'  #指定多个字段分隔符(文档内容为：hello the:word,!)
hell the world !



awk的例子
whwu@master:~/script> cat 4.txt
100
1000
10000


100000
10
10000000000

1

12
123
1234
whwu@master:~/script> awk '/^$/ {print NR,"blank line"}' 4.txt   # /^$/匹配空行 NR表示行数 ，表示输出时为空格 ""表示打印字段。先匹配再打印
4 blank line
5 blank line
9 blank line
11 blank line
whwu@master:~/script> cat awk.sh  #可以先写一个脚本
/^$/ {print NR,"blank line"}
whwu@master:~/script> awk -f awk.sh 4.txt #提前编辑一个awk脚本再通过-f选项调用该脚本。
4 blank line
5 blank line
9 blank line
11 blank line
whwu@master:~/script> cat awk1.sh   将awk命令也编译入脚本
#!/usr/bin/awk -f

/^$/ {print NR,"blank line"}

whwu@master:~/script> ./awk1.sh 4.txt
4 blank line
5 blank line
9 blank line
11 blank line



内置变量
    以下为awk内置变量：
          ARGC        命令行参数个数
          FILENAME    当前输入文档的名称
          FNR        当前输入文档的当前记录编号，尤其当有多个输入文档时有用
          NR        输入流的当前记录编号
          NF        当前记录的字段个数
          FS        字段分隔符，默认为空格
          OFS        输出字段分隔符，默认为空格
          ORS        输出记录分隔符，默认为换行符\n
           RS        输入记录分隔符，默认为换行符\n

whwu@master:~/script> cat 1.txt
book google
baidu book book
i lovae shell book apple
whwu@master:~/script> cat 2.txt
1 2 6
2 3 9
3 4 12
4 5 15
whwu@master:~/script> awk '{print FNR}' 1.txt 2.txt   # FNR当前输入文档的当前记录编号
1
2
3
1
2
3
4
whwu@master:~/script> awk '{print NR}' 1.txt 2.txt     # NR输入流的当前记录编号
1
2
3
4
5
6
7

whwu@master:~/script> awk '{print NF}' 1.txt	      # NF当前记录的字段个数 
2
3
5
whwu@master:~/script> awk 'BEGIN{OFS="-"}{print $1,$2}' 1.txt		#OFS        输出字段分隔符
book-google
baidu-book
i-lovae

whwu@master:~/script> cat 6.txt
mail from: tomcat@gmail.com
subject:hello
data:2012-07-12 17:0
content:Hello, The world.

mail from: jerry@gmail.com
subject:congregation
data:2012-07-12 08:31
content:Congregation to you.

mail from: jacob@gmail.com
subject:Test
data:2012-07-12 10:20
content:This is a test mail.
whwu@master:~/script> awk 'BEGIN {RS="" ; FS="\n"}{print $3 }' 6.txt    #RS将段落分隔符设置为空行，将字段分隔符设置为换行符，
data:2012-07-12 17:0
data:2012-07-12 08:31
data:2012-07-12 10:20



4. 表达式与操作符
    表达式是由变量、常量、函数、正则表达式、操作符组成，awk中变量有字符变量和数字变量。如果在awk中定义的变量没有初始化，则初始值为空字串或0。
    注意：字符操作时一定记得需要加引号
    1) 变量定义示例：
        a="welcome to beijing"
         b=12
     2) 操作符(awk操作符与C语言类似)
      +        加
   -        减
   *        乘
   /        除
   %        取余
   ^        幂运算
   ++        自加1
    --        自减1
    +=        相加后赋值给变量(x+=9等同于x=x+9)
    -=        相减后赋值给变量(x-=9等同于x=x-9)
    *=        相乘后赋值给变量(x*=9等同于x=x*9)
    /=        相除后赋值给变量(x/=9等同于x=x/9)
    >        大于
   <        小于
   >=        大于等于
   <=        小于等于
   ==        等于
   !=        不等于
   ~        匹配
   !~        不匹配
   &&        与
   ||        或

whwu@master:~/script> echo "test" | awk 'x=2 {print x+3}'
5
whwu@master:~/script> echo "test" | awk ' {print x+3}'   #没有赋值x默认为0
3


whwu@master:~/script> cat 6.txt
mail from: tomcat@gmail.com
subject:hello


data:2012-07-12 17:0
content:Hello, The world.

mail from: jerry@gmail.com
subject:congregation

data:2012-07-12 08:31

content:Congregation to you.

mail from: jacob@gmail.com
subject:Test
data:2012-07-12 10:20
content:This is a test mail.
whwu@master:~/script> awk '/^$/ {print x+=1}' 6.txt		 #统计所有空白行
1
2
3
4
5
whwu@master:~/script> awk '/^$/ {x+=1} END{print x}' 6.txt	 #打印总空白行个数
5


awk条件及循环语句
    1. IF条件判断格式：
    if (表达式)
         动作1
     else
         动作2
     或者if (表达式)  动作1；else 动作2
     说明：如果表达式的判断结果为真则执行动作1，否则执行动作2。
    示例：(判断boot分区可用容量小于20M时报警，否则显示OK)
whwu@master:~/script> df  |grep    "boot"  |awk  '{if($4<20000) print "Alart"; else print "OK"}'
OK


 2. 循环
    while (条件)
         动作
    x=1
     while (i < 10) {
         print $i
     }
     示例：
whwu@master:~/script> awk  ' BEGIN { while (i<=5) {++i; print i}}'  6.txt
1
2
3
4
5
6
 do
         动作
    while (条件)
     示例：
 whwu@master:~/script> awk 'BEGIN { do {++x;print x} while (x<=5)}' test.txt
1
2
3
4
5
6
for (变量；条件；计数器)
         动作
    示例：
    for (i=1;i<=10;i++)
         print i
     [jacob@localhost ~]# awk  'BEGIN {for(i=1;i<=10;i++) print i}'  test.txt
     [jacob@localhost ~]# awk  'BEGIN {for(i=10;i>=1;i--)  print i}'   test.txt
     说明：因为以上循环语句使用的awk均使用的BEGIN模式，所以输入文档可以为任意文档(无关紧要)。


Break与Continue
     break        跳出循环
    continue    终止当前循环
 whwu@master:~/script> awk 'BEGIN{for(i=1;i<=10;i++){if(i==5){continue}print i}}' test.sh
1
2
3
4
6
7
8
9
10
whwu@master:~/script> awk 'BEGIN{for(i=1;i<=10;i++){if(i==5){break}print i}}' test.sh
1
2
3
4

函数
 gsub(x,y,z)        在字串z中使用字串y替换与正则表达式x相匹配的所有字串，z默认为$0
  sub(x,y,z)        在字串z中使用字串y替换与正则表达式x相匹配的第一个字串，z默认为$0
whwu@master:~/script> awk -F: 'gsub(/x/,"H",$0){print $0}' new
jones:H:516:516:Adrian W. Jones/OSD211/555-0123:/home/vfung:/bin/bash
dorothy:H:517:517:Dorothy Gale/KNS321/555-0044:/home/nmehio:/bin/bash
toto:H:518:518:Toto Gale/KNS322/555-0045:/home/mmicklich:/bin/bash
ben:H:519:519:Ben Franklin/OSD212/555-0022:/home/whwu:/bin/bash\
betsy:H:520:520:Betsy Ross/BMD17/555-0095:/home/ysong:/bin/bash

whwu@master:~/script> awk -F: 'gsub(/o/,"H",$1){print $1}' new  #字段中的所有o都变成H
jHnes
dHrHthy
tHtH

whwu@master:~/script> awk -F: 'sub(/o/,"H",$1){print $1}' new   #字段中的第一个o变成H
jHnes
dHrothy
tHto


awk算例
whwu@master:~/script> cat pay.txt
Name    1st     2nd     3th
VBird   23000   24000   25000
DMTsai  21000   20000   23000
Bird2   43000   42000   41000

whwu@master:~/script> cat pay.sh
#!/usr/bin/awk -f
#pay.sh

NR==1{printf "%10s %10s %10s %10s %10s\n",$1,$2,$3,$4,"Total" }
NR>=2{total = $2 + $3 + $4
printf "%10s %10d %10d %10d %10.2f\n", $1, $2, $3, $4, total}   #

whwu@master:~/script> ./pay.sh pay.txt
      Name        1st        2nd        3th      Total
     VBird      23000      24000      25000   72000.00
    DMTsai      21000      20000      23000   64000.00
     Bird2      43000      42000      41000  126000.00
printf命令模仿C程序库（library）里的printf()库程序（library routine）。它几乎复制了
该函数的所有功能。不过在Shell层级的版本上，会有些差异。由于printf的行为是由POSIX
标准所定义，因此使用printf的脚本比使用echo移植性好。
printf命令的完整语法有两个部分：
printf format-string [arguments...]
第一部分为描述格式规格的字符串，用来描述输出的排列方式，最好为此字符串加上引号。此字符
串包含按字面显示的字符以及格式声明，格式声明时特殊的占位符，用来描述如何显示相应的参数。
第二部分是与格式声明相对应的参数列表，例如一系列的字符串或变量值。格式声明由两部分组成：
百分比符号（%）和指示符。最常用的格式指示符有两个，%s用于字符串，而%d用于十进制整数。

   #%-20s表示一个左对齐、宽度为20个字符字符串格式，不足20个字符，右侧补充相应数量的空格符。
   #%-15s表示一个左对齐、宽度为15个字符字符串格式。
   #%10.2f表示右对齐、10个字符长度的浮点数，其中一个是小数点，小数点后面保留两位。
   /> printf "%-20s%-15s%10.2f\n" "Stephen" "Liu" 35
   Stephen             Liu                 35.00
    #%10s表示右对齐、宽度为10的字符串，如不足10个字符，左侧补充相应数量的空格符



whwu@master:~/script> cat grade.txt
M.Tansley       05/99   48311   Green   8       40      44
J.Lulu          06/99   48317   green   9       24      26
P.Bunny         02/99   48      Yellow  12      35      28
J.Troll         07/99   4842    Brown-3 12      26      26
L.Tansley       05/99   4712    Brown-2 12      30      28
whwu@master:~/script> awk 'BEGIN{printf "%-10s %-10s\n","Name","Belt";print "-----------------\n"}{printf "%-10s %-10s\n",$1,$4}' grade.txt  #添加表头 右匹配
Name       Belt
-----------------

M.Tansley  Green
J.Lulu     green
P.Bunny    Yellow
J.Troll    Brown-3
L.Tansley  Brown-2

whwu@master:~/script> awk '$3~/48/ {print $0}' grade.txt        # 非精确匹配  ~匹配
M.Tansley       05/99   48311   Green   8       40      44
J.Lulu          06/99   48317   green   9       24      26
P.Bunny         02/99   48      Yellow  12      35      28
J.Troll         07/99   4842    Brown-3 12      26      26


whwu@master:~/script> awk '$3=="48" {print $0}' grade.txt       #精确匹配
P.Bunny         02/99   48      Yellow  12      35      28

whwu@master:~/script> awk '$6 < $7 {print $0 "\t" "Try better"}' grade.txt      #小于
M.Tansley       05/99   48311   Green   8       40      44      Try better
J.Lulu          06/99   48317   green   9       24      26      Try better


whwu@master:~/script> awk '$1~/^..T/' grade.txt				#匹配第一个域第二个字母是T的行
M.Tansley       05/99   48311   Green   8       40      44
J.Troll         07/99   4842    Brown-3 12      26      26
L.Tansley       05/99   4712    Brown-2 12      30      28


whwu@master:~/script> awk '$0~/(Yellow|Brown)/' grade.txt		#匹配整行中含Yellow以及Brown的行
P.Bunny         02/99   48      Yellow  12      35      28
J.Troll         07/99   4842    Brown-3 12      26      26
L.Tansley       05/99   4712    Brown-2 12      30      28

whwu@master:~/script> echo $PWD					       #参数指定分隔符-F \t的应用
/home/whwu/script
whwu@master:~/script> echo $PWD | awk -F/ '{print $NF"\t"NF }'
script  4

whwu@master:~/script> awk '{if($1=="M.Tansley") $6=$6-1;print $1,$6,$7}' grade.txt  #修改数值域取值，注意‘{}’
M.Tansley 39 44
J.Lulu 24 26
P.Bunny 35 28
J.Troll 26 26
L.Tansley 30 28

whwu@master:~/script> awk '{if($1=="M.Tansley"){$6=$6-1; print $1,$6,$7} else print"o"}' grade.txt  #注意与上一条的区别
M.Tansley 39 44
o
o
o
o

whwu@master:~/script> awk '{if($1=="J.Troll")$1="J.L.Troll";print $1}' grade.txt  修改文本域取值
M.Tansley
J.Lulu
P.Bunny
J.L.Troll
L.Tansley


whwu@master:~/script> awk '{tot+=$6} END{print "Club student total points: " tot}' grade.txt	#{tot+=$6}属于command
Club student total points: 155
whwu@master:~/script> awk 'tot+=$6; END{print "Club student total points: " tot}' grade.txt	#tot+=$6属于pattern，没有command，默认打印每一行
M.Tansley       05/99   48311   Green   8       40      44
J.Lulu          06/99   48317   green   9       24      26
P.Bunny         02/99   48      Yellow  12      35      28
J.Troll         07/99   4842    Brown-3 12      26      26
L.Tansley       05/99   4712    Brown-2 12      30      28
Club student total points: 155

awk 内置字符串函数

gsub(r,s)          在整个$0中用s替代r
gsub(r,s,t)        在整个t中使用s替代r
index(s,t)         在返回s中字符串t的第一个位置
length(s)          放回s长度
match(s,r)         测试s是否包含匹配r的字符串
split(s,a,fs)      在fs上将s分成序列a
sprint(fmt,exp)    返回经fmt格式化后的exp
sub(r,s)           用$0中最左边最长的子串代替s
substr(s,p)        返回字符串s中从p开始的后缀部分
substr(s,p,n)      返回字符串s中从p开始长度为n的后缀部分

whwu@master:~/script> awk 'gsub(/4842/,4899){print $0}' grade.txt    #gsub(r,s)在整个$0中用s替代r 替换，目标串使用正则表达式格式‘//’
J.Troll         07/99   4899    Brown-3 12      26      26
whwu@master:~/script> awk 'gsub(4842,4899){print $0}' grade.txt
J.Troll         07/99   4899    Brown-3 12      26      26

whwu@master:~/script> awk 'gsub(8,0,$3){print $0}' grade.txt     #gsub(r,s,t)在整个t中使用s替代r，在第三个域中，将8替换为0.
M.Tansley 05/99 40311 Green 8 40 44
J.Lulu 06/99 40317 green 9 24 26
P.Bunny 02/99 40 Yellow 12 35 28
J.Troll 07/99 4042 Brown-3 12 26 26

whwu@master:~/script> awk 'BEGIN{print index("Bunny","ny")}' grade.txt   #index(s,t)在返回s中字符串t的第一个位置， BEGIN在读取文本之前，因此只打印一个4
4
whwu@master:~/script> awk '{print index("Bunny","ny")}' grade.txt	 #没有BEGIN，每读取一行都要进行一次打印
4
4
4
4
4

whwu@master:~/script> awk '$1=="J.Troll" {print length($1),$1}' grade.txt # length（s）返回s的长度
7 J.Troll
whwu@master:~/script> awk '$1=="J.Troll" {print length($1)"\t" $1}' grade.txt #注意"\t"的应用
7       J.Troll



whwu@master:~/script> awk 'BEGIN{print match("ANCD",/d/)}'       #测试s是否包含匹配r的字符串，否返回0，真返回字符串中位置
0
whwu@master:~/script> awk 'BEGIN{print match("ANCD",/D/)}'
4
whwu@master:~/script> awk 'NR==1{print match($1,/a/)}' grade.txt
4


whwu@master:~/script> awk 'BEGIN{print split("123#456#789",myarray,"#");print myarray[1],myarray[2],myarray[3]}'  #split(s,a,fs)以fs为分隔符将，将s分隔为数组a
3
123 456 789

whwu@master:~/script> awk '$1=="J.Troll"{sub(26,29,$0)}{print $0}' grade.txt   #替换第一个
M.Tansley       05/99   48311   Green   8       40      44
J.Lulu          06/99   48317   green   9       24      26
P.Bunny         02/99   48      Yellow  12      35      28
J.Troll         07/99   4842    Brown-3 12      29      26
L.Tansley       05/99   4712    Brown-2 12      30      28
whwu@master:~/script> awk '$1=="J.Troll"{gsub(26,29,$0)}{print $0}' grade.txt  #替换所有
M.Tansley       05/99   48311   Green   8       40      44
J.Lulu          06/99   48317   green   9       24      26
P.Bunny         02/99   48      Yellow  12      35      28
J.Troll         07/99   4842    Brown-3 12      29      29
L.Tansley       05/99   4712    Brown-2 12      30      28


whwu@master:~/script> awk '$1=="L.Tansley"{print substr($1,1,5)}' grade.txt  #打印字符串指定范围内的子串
L.Tan

whwu@master:~/script> awk '{print substr($1,3)}' grade.txt #打印第一个字符串，由第三个子串后的部分
Tansley
Lulu
Bunny
Troll
Tansley

##################################
#############awk 数组##############
###################################
awk数组是类似于一个键值对，既可以使用数字做下标，也可以使用字符串做下标

whwu@master:~/script/test> array=(1 2 3 4)
whwu@master:~/script/test> echo ${#array[@]}       #数组元素个数
4


###得到数组长度###
whwu@master:~/script> awk 'BEGIN{info="it is a test";lens=split(info,tA," ");print length(tA),lens;}'                  
4 4


###输出数组内容###
whwu@master:~/script> awk 'BEGIN{info="it is a test";split(info,M," ");for(k in M){print k,M[k]}}'
4 test
1 it
2 is
3 a

# for…in 输出，因为数组是关联数组，默认是无序的。所以通过for…in 得到是无序的数组。


whwu@master:~/script> awk 'BEGIN{info="it is a test";num=split(info,M," ");for(i=1;i<=num;i++){print i,M[i]}}'  # 如果需要得到有序数组，需要通过下标获得。
1 it
2 is
3 a
4 test


###判断键值存在以及删除键值###
whwu@master:~/script> awk 'BEGIN{M["a"]="a1";M["b"]="b1";M["c"]="c1";if("c" in M){print "ok"};for(k in M){print k,M[k]}}'
ok
a a1
b b1
c c1

whwu@master:~/script> awk 'BEGIN{M["a"]="a1";M["b"]="b1";if("c" in M){print "ok"};for(k in M){print k,M[k]}}'          
a a1
b b1

###删除键值###
whwu@master:~/script> awk 'BEGIN{M["a"]="a1";M["b"]="b1";M["c"]="c1";delete M["a"];for(k in M){print k,M[k]}}'
b b1
c c1


###二维数组###
whwu@master:~/script/test> cat awk_example.sh
#!/bin/bash

awk 'BEGIN{
        for(i=1;i<=4;i++)
        {
                for(j=1;j<=4;j++)
                {
                        arr[i,j]=i*j
                        print i,"*",j"=",arr[i,j]
                }
        }
}'
whwu@master:~/script/test> ./awk_example.sh
1 * 1= 1
1 * 2= 2
1 * 3= 3
1 * 4= 4
2 * 1= 2
2 * 2= 4
2 * 3= 6
2 * 4= 8
3 * 1= 3
3 * 2= 6
3 * 3= 9
3 * 4= 12
4 * 1= 4
4 * 2= 8
4 * 3= 12
4 * 4= 16



